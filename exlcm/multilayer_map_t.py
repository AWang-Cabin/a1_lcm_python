"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class multilayer_map_t(object):
    __slots__ = ["layers", "x_size", "y_size", "multimap"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "float"]

    __dimensions__ = [None, None, None, ["layers", "x_size", "y_size"]]

    def __init__(self):
        self.layers = 0
        self.x_size = 0
        self.y_size = 0
        self.multimap = []

    def encode(self):
        buf = BytesIO()
        buf.write(multilayer_map_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iii", self.layers, self.x_size, self.y_size))
        for i0 in range(self.layers):
            for i1 in range(self.x_size):
                buf.write(struct.pack('>%df' % self.y_size, *self.multimap[i0][i1][:self.y_size]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != multilayer_map_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return multilayer_map_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = multilayer_map_t()
        self.layers, self.x_size, self.y_size = struct.unpack(">iii", buf.read(12))
        self.multimap = []
        for i0 in range(self.layers):
            self.multimap.append([])
            for i1 in range(self.x_size):
                self.multimap[i0].append(struct.unpack('>%df' % self.y_size, buf.read(self.y_size * 4)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if multilayer_map_t in parents: return 0
        tmphash = (0xba2c22dc8ca1f8ee) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if multilayer_map_t._packed_fingerprint is None:
            multilayer_map_t._packed_fingerprint = struct.pack(">Q", multilayer_map_t._get_hash_recursive([]))
        return multilayer_map_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

